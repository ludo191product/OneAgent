---
- name: Création de tags automatiques sur Dynatrace
  hosts: localhost
  gather_facts: no
  vars:
    dynatrace_environment_id: "votre-environment-id"
    dynatrace_api_token: "votre-api-token"
    vm_list:
      - { name: "VM1", code: "AP-VM1" }
      - { name: "VM2", code: "AP-VM2" }
      - { name: "VM3", code: "AP-VM3" }
      - { name: "VM4", code: "AP-VM4" }

  tasks:
    - name: Créer des tags automatiques pour chaque VM
      uri:
        url: "https://{{ dynatrace_environment_id }}.live.dynatrace.com/api/v2/settings/objects"
        method: POST
        headers:
          Content-Type: "application/json"
          Authorization: "Api-Token {{ dynatrace_api_token }}"
        body: |
          {
            "schemaId": "builtin:tags.auto-tagging",
            "scope": "environment",
            "value": {
              "name": "[Environnement] Code",
              "description": "Tag automatique pour {{ item.code }}",
              "rules": [
                {
                  "enabled": true,
                  "type": "SELECTOR",
                  "valueFormat": "{{ item.code }}",
                  "valueNormalization": "Leave text as-is",
                  "entitySelector": "type(\"PROCESS_GROUP_INSTANCE\"),fromRelationships.isProcessOf(type(\"HOST\"),entityName(\"{{ item.name }}\"))"
                },
                {
                  "enabled": true,
                  "type": "SELECTOR",
                  "valueFormat": "{{ item.code }}",
                  "valueNormalization": "Leave text as-is",
                  "entitySelector": "type(\"SERVICE\"),fromRelationships.runsOnHost(type(\"HOST\"),entityName(\"{{ item.name }}\"))"
                },
                {
                  "enabled": true,
                  "type": "SELECTOR",
                  "valueFormat": "{{ item.code }}",
                  "valueNormalization": "Leave text as-is",
                  "entitySelector": "type(\"HOST\"),entityName.contains(\"{{ item.name }}\")"
                },
                {
                  "enabled": true,
                  "type": "SELECTOR",
                  "valueFormat": "{{ item.code }}",
                  "valueNormalization": "Leave text as-is",
                  "entitySelector": "type(\"APPLICATION\"),entityName.contains(\"{{ item.name | lower }}\")"
                }
              ]
            }
          }
        body_format: json
        status_code: 201
      loop: "{{ vm_list }}"
      loop_control:
        label: "{{ item.name }}"
